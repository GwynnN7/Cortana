@page "/devices"
@using CortanaLib
@using CortanaLib.Structures
@rendermode InteractiveServer

<main>
    <section id="devices">
        <div class="device-grid">
            <div class="device-card">
                <h3>Power</h3>
                <p>@_deviceStatus?[EDevice.Power]</p>
                <div>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Power, EPowerAction.On)">On</button>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Power, EPowerAction.Off)">Off</button>
                </div>
                <button class="device-button" @onclick="() => SwitchDevice(EDevice.Power, EPowerAction.Toggle)">Toggle</button>
            </div>
            <div class="device-card">
                <h3>Computer</h3>
                <p>@_deviceStatus?[EDevice.Computer]</p>
                <div>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Computer, EPowerAction.On)">On</button>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Computer, EPowerAction.Off)">Off</button>
                </div>
                <button class="device-button" @onclick="() => SwitchDevice(EDevice.Computer, EPowerAction.Toggle)">Toggle</button>
            </div>
            <div class="device-card">
                <h3>Lamp</h3>
                <p>@_deviceStatus?[EDevice.Lamp]</p>
                <div>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Lamp, EPowerAction.On)">On</button>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Lamp, EPowerAction.Off)">Off</button>
                </div>
                <button class="device-button" @onclick="() => SwitchDevice(EDevice.Lamp, EPowerAction.Toggle)">Toggle</button>
            </div>
            <div class="device-card">
                <h3>Generic</h3>
                <p>@_deviceStatus?[EDevice.Generic]</p>
                <div>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Generic, EPowerAction.On)">On</button>
                    <button class="device-button" @onclick="() => SwitchDevice(EDevice.Generic, EPowerAction.Off)">Off</button>
                </div>
                <button class="device-button" @onclick="() => SwitchDevice(EDevice.Generic, EPowerAction.Toggle)">Toggle</button>
            </div>
        </div>
    </section>

    <div class="container">
        <div class="card">
            <h2>Commands</h2>
            <div class="button-group">
                <button @onclick="() => CommandPc(EComputerCommand.Reboot)">Reboot</button>
                <button @onclick="() => CommandPc(EComputerCommand.Suspend)">Suspend</button>
                <button @onclick="() => CommandPc(EComputerCommand.System)">Linux/Windows</button>
                <button @onclick="Sleep">Sleep</button>
            </div>
        </div>
    </div>
</main>

@code {
    private System.Threading.Timer? _timer;
    private Dictionary<EDevice, string>? _deviceStatus;

    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync( async ()  =>
            {
                await UpdateStatus();
                StateHasChanged();
            });
        }, null, 0, 2000);

        await base.OnInitializedAsync();
    }

    private async Task SwitchDevice(EDevice device, EPowerAction action)
    {
        await ApiHandler.Post($"{ERoute.Devices}/{device}", new PostAction(action.ToString()));
        await UpdateStatus();
    }

    private async Task UpdateStatus()
    {
        MessageResponse lamp = await ApiHandler.Get($"{ERoute.Devices}/{EDevice.Lamp}");
        MessageResponse power = await ApiHandler.Get($"{ERoute.Devices}/{EDevice.Power}");
        MessageResponse computer = await ApiHandler.Get($"{ERoute.Devices}/{EDevice.Computer}");
        MessageResponse generic = await ApiHandler.Get($"{ERoute.Devices}/{EDevice.Generic}");

        _deviceStatus = new Dictionary<EDevice, string>
        {
            { EDevice.Lamp, lamp.Message },
            { EDevice.Power, power.Message },
            { EDevice.Computer, computer.Message },
            { EDevice.Generic, generic.Message }
        };
    }

    private async Task Sleep()
    {
        await ApiHandler.Post($"{ERoute.Devices}/sleep");
        await UpdateStatus();
    }

    private async Task CommandPc(EComputerCommand command)
    {
        await ApiHandler.Post($"{ERoute.Computer}", new PostCommand(command.ToString()));
        await UpdateStatus();
    }

}